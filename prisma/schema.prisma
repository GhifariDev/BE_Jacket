generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model CartItem {
  id        Int @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int @default(1)

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  createdAt DateTime    @default(now())
  status    OrderStatus @default(PENDING)

  snapToken    String?   // ðŸ”¹ untuk simpan token Snap
  snapRedirect String?   // ðŸ”¹ untuk simpan redirect URL

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}


model OrderItem {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int
  userId    Int?
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])
}

model Product {
  id            Int           @id @default(autoincrement())
  title         String
  description   String
  price         Float         // harga setelah diskon
  originalPrice Float?        // harga normal
  category      String
  stock         Int           @default(0)
  imageUrl      String
  status        ProductStatus @default(PENDING)
  userId        Int?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  position      Int?

  // ðŸ”¹ waktu diskon
  discountStart DateTime?
  discountEnd   DateTime?

  seller     User?       @relation(fields: [userId], references: [id])
  cartItems  CartItem[]
  orderItems OrderItem[]
}


enum ProductStatus {
  PENDING
  APPROVED
  REJECTED
}


model Review {
  id        Int      @id @default(autoincrement())
  content   String
  rating    Int
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  phone     String   @unique
  isBlocked Boolean  @default(false)
  createdAt DateTime @default(now())

  
  // Tambahan untuk OAuth
  provider   String?  // contoh: "google" utu
  providerId String?  // ID dari Google user
  picture    String?  // foto profil dari Google

  roles         UserRole[]
  cartItems     CartItem[]
  orders        Order[]
  orderItems    OrderItem[]
  reviews       Review[]
  otps          OTP[]
  penjualanBaju PenjualanBaju[]
  products      Product[] // relasi ke produk yg diupload user
}

model OTP {
  id        Int      @id @default(autoincrement())
  code      Int
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PenjualanBaju {
  id        Int                 @id @default(autoincrement())
  userId    Int
  nama      String
  alamat    String
  alasan    String
  gambar    String
  status    PenjualanBajuStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PenjualanBajuStatus {
  PENDING
  APPROVED
  REJECTED
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model Role {
  id    Int        @id @default(autoincrement())
  name  String     @unique
  users UserRole[]
}

model UserRole {
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}
